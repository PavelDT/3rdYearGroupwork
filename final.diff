diff --git a/src/group6/Main.java b/src/group6/Main.java
index ca627a9..b850159 100644
--- a/src/group6/Main.java
+++ b/src/group6/Main.java
@@ -128,7 +128,9 @@ public class Main extends JDialog {
 		new CleaningSupervisor(aircraftManagementDatabase);
 		new RefuellingSupervisor(aircraftManagementDatabase);
 		new RadarTransceiver(aircraftManagementDatabase);
-		new PublicInfo(aircraftManagementDatabase);
+		for (int publicInfo = 0; publicInfo < PublicInfo.maxPublicInfoScreens; publicInfo ++) {
+			new PublicInfo(aircraftManagementDatabase);
+		}
 		for (int gateNumber = 0; gateNumber < GateInfoDatabase.maxGateNumber; gateNumber++) {
 			new GateConsole(aircraftManagementDatabase, gateInfoDatabase, gateNumber);
 		}
diff --git a/src/group6/util/UISettings.java b/src/group6/util/UISettings.java
index 874b0dc..12b35d0 100644
--- a/src/group6/util/UISettings.java
+++ b/src/group6/util/UISettings.java
@@ -16,6 +16,7 @@ public class UISettings {
 	public static final Point GateConsolePosition1 = new Point(1375, 410);
 	public static final Point GateConsolePosition2= new Point(920, 715);
 	public static final Point GOCPosition = new Point(465, 620);
-	public static final Point PublicInfo = new Point(1375, 715);
+	public static final Point PublicInfo0 = new Point(1375, 715);
+	public static final Point PublicInfo1 = new Point(1200, 800);
 
 }
\ No newline at end of file
diff --git a/src/group6/view/PublicInfo.java b/src/group6/view/PublicInfo.java
index 179ca08..ac6d166 100644
--- a/src/group6/view/PublicInfo.java
+++ b/src/group6/view/PublicInfo.java
@@ -7,6 +7,9 @@ import group6.model.ManagementRecord;
 import group6.util.UISettings;
 
 import javax.swing.*;
+import javax.swing.border.EmptyBorder;
+import javax.swing.border.TitledBorder;
+import javax.swing.table.DefaultTableModel;
 import java.awt.*;
 import java.util.*;
 import java.util.List;
@@ -33,14 +36,46 @@ public class PublicInfo extends JFrame implements Observer {
 	 */
 	private AircraftManagementDatabase aircraftManagementDatabase;
 
-	public PublicInfo(AircraftManagementDatabase aircraftManagementDatabase) {
-		JFrame frame = new JFrame();
-		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+    // table for the flights and their status
+    private JTable table;
+    // model of the flights list
+    private DefaultTableModel model;
+
+    public static int maxPublicInfoScreens = 2;
+
+    public PublicInfo(AircraftManagementDatabase aircraftManagementDatabase) {
+
+        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+
+        this.aircraftManagementDatabase = aircraftManagementDatabase;
+        setTitle("Public Info View");
+        setLocation(UISettings.PublicInfo0);
+        setLocation(UISettings.PublicInfo1);
+        setSize(UISettings.VIEW_WIDTH, UISettings.VIEW_HEIGHT);
+
+        Container window = getContentPane();
+        window.setLayout(new BoxLayout(window, BoxLayout.PAGE_AXIS));
+
+        JPanel row0 = new JPanel();
+        row0.setBorder(new EmptyBorder(0, 0, 10, 0));
+        row0.setLayout(new BorderLayout());
+        model = new DefaultTableModel() {
+            @Override
+            public boolean isCellEditable(int row, int column) {
+                return false;
+            }
+        };
+
+        table = new JTable(model);
+        table.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));
+        table.getTableHeader().setReorderingAllowed(false);
+        model.addColumn("ID");
+        model.addColumn("AIRCRAFT");
+        model.addColumn("STATUS");
+        table.setModel(model);
+        JScrollPane tableScroll = new JScrollPane(table);
+        row0.add(tableScroll);
 
-		this.aircraftManagementDatabase = aircraftManagementDatabase;
-		setTitle("Public Info View");
-		setLocation(UISettings.PublicInfo);
-		setSize(380, 256);
 
 		JPanel panel = new JPanel();
 		getContentPane().add(panel, BorderLayout.CENTER);
@@ -54,54 +89,61 @@ public class PublicInfo extends JFrame implements Observer {
 		sl_panel.putConstraint(SpringLayout.EAST, textArea, 354, SpringLayout.WEST, panel);
 		panel.add(textArea);
 
-		setVisible(true);
+		int[] waitingToLand = this.aircraftManagementDatabase.getWithStatus(ManagementRecord.WANTING_TO_LAND);
+		int[] groundClearanceGranted = this.aircraftManagementDatabase.getWithStatus(ManagementRecord.GROUND_CLEARANCE_GRANTED);
+		int[] landing = this.aircraftManagementDatabase.getWithStatus(ManagementRecord.LANDING);
 
-	}
+		List<String> aircraftCodes = new ArrayList<>();
+		addAircraftCodes(0, this.aircraftManagementDatabase, waitingToLand, aircraftCodes);
+		addAircraftCodes(aircraftCodes.size() - 1, this.aircraftManagementDatabase, groundClearanceGranted, aircraftCodes);
+		addAircraftCodes(aircraftCodes.size() - 1, this.aircraftManagementDatabase, landing, aircraftCodes);
 
-	@Override
-	public void update(Observable o, Object a) {
-		AircraftManagementDatabase aircraftDatabase = null;
-		try {
-			aircraftDatabase = (AircraftManagementDatabase) a;
-		} catch (ClassCastException e) {
-			System.out.println(e.getMessage());
-		}
-		if (aircraftDatabase != null) {
-			aircraftManagementDatabase = aircraftDatabase;
+		Vector<Vector> data = new Vector<>();
+		for (int i = 0; i < aircraftCodes.size(); i++) {
+			Vector<String> row = new Vector<>();
+			row.addElement(aircraftCodes.get(i));
+			data.addElement(row);
 		}
+
+        // add frames to window
+        window.add(row0);
+
+        // observe the singleton aircraftManDB
+        this.aircraftManagementDatabase.addObserver(this);
+
+        setVisible(true);
+
 	}
-}
 
-//private void addAircraftCodes(int index, AircraftManagementDatabase aircraftManagementDatabase, int[] mrs,
-//		List<String> aircraftCodes) {
-//	for (int i = index, j = 0; j < mrs.length; i++, j++) {
-//		aircraftCodes.add(aircraftManagementDatabase.getFlightCode(mrs[j]));
-//	}
-//}
-
-//int[] waitingToLand = this.aircraftManagementDatabase.getWithStatus(ManagementRecord.WANTING_TO_LAND);
-//int[] groundClearanceGranted = this.aircraftManagementDatabase.getWithStatus(ManagementRecord.GROUND_CLEARANCE_GRANTED);
-//int[]  landing = this.aircraftManagementDatabase.getWithStatus(ManagementRecord.LANDING);
-//
-//List<String> aircraftCodes = new ArrayList<>();
-//addAircraftCodes(0, this.aircraftManagementDatabase, waitingToLand, aircraftCodes);
-//addAircraftCodes(aircraftCodes.size() - 1, this.aircraftManagementDatabase, groundClearanceGranted, aircraftCodes);
-//addAircraftCodes(aircraftCodes.size() - 1, this.aircraftManagementDatabase, landing, aircraftCodes);
-//
-//Vector<Vector> data = new Vector<>();
-//for(int i=0; i<aircraftCodes.size(); i++) {
-//    Vector<String> row  = new Vector<>();
-//    row.addElement(aircraftCodes.get(i));
-//    data.addElement(row);
-//}
-//
-//Vector<String> columnNames = new Vector<>();
-//columnNames.addElement("Flight's Landing");
-//
-//JTable table = new JTable(data, columnNames);
-//
-//JScrollPane aircraftScroll = new JScrollPane(table);
-//frame.add(aircraftScroll, BorderLayout.CENTER);
-//frame.setSize(500, 500);
-//frame.setVisible(true);
-//aircraftScroll.setPreferredSize(new Dimension(350, 150));
+    private void addAircraftCodes(int index, AircraftManagementDatabase aircraftManagementDatabase, int[] mrs,
+                                  List<String> aircraftCodes) {
+        for (int i = index, j = 0; j < mrs.length; i++, j++) {
+            aircraftCodes.add(aircraftManagementDatabase.getFlightCode(mrs[j]));
+        }
+    }
+
+    @Override
+    public void update(Observable o, Object a) {
+
+        // empty the table
+        model.setRowCount(0);
+
+        // loop over every management record to update table
+        int maxRecords = aircraftManagementDatabase.maxMRs;
+        for (int i = 0; i < maxRecords; i++) {
+            //int flightStatus = aircraftManagementDatabase.getStatus(i);
+            int flightStatus = aircraftManagementDatabase.getStatus(i);
+            // Status is displayd if its one of the below 3:
+            // WANTING_TO_LAND = 2;
+            // GROUND_CLEARANCE_GRANTED = 3;
+            // LANDING = 4;
+            if (flightStatus == ManagementRecord.WANTING_TO_LAND ||
+                    flightStatus == ManagementRecord.GROUND_CLEARANCE_GRANTED ||
+                    flightStatus == ManagementRecord.LANDING) {
+                // update table
+                String code = aircraftManagementDatabase.getFlightCode(i);
+                model.addRow(new Object[]{i, code, flightStatus});
+            }
+        }
+    }
+}
