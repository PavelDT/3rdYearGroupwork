package group6.view;


// Generated by Together


import group6.controller.AircraftManagementDatabase;
import group6.model.ManagementRecord;

import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;

/**
 * An interface to SAAMS:
 * Cleaning Supervisor Screen:
 * Inputs events from the Cleaning Supervisor, and displays aircraft information.
 * This class is a controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class CleaningSupervisor extends JFrame implements Observer {
    /**
     * The Cleaning Supervisor Screen interface has access to the AircraftManagementDatabase.
     *
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label accesses/observes
     * @directed
     */
    private AircraftManagementDatabase aircraftManagementDatabase;

    public CleaningSupervisor(AircraftManagementDatabase aircraftManagementDatabase) {
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        this.aircraftManagementDatabase = aircraftManagementDatabase;
        setTitle("Cleaning Supervisor View");
        setLocation(150, 150);
        setSize(350, 150);
        Container window = getContentPane();
        window.setLayout(new FlowLayout());
        List<Integer> aWaitClean = this.aircraftManagementDatabase.getWithStatus(ManagementRecord.OK_AWAIT_CLEAN);

        String[] aircraftCodes = new String[aWaitClean.size()];
        addAircraftCodes(0, this.aircraftManagementDatabase, aWaitClean, aircraftCodes);

        Vector<Vector> data = new Vector<>();
        for(int i=0; i<aircraftCodes.length; i++) {
            Vector<String> row  = new Vector<>();
            row.addElement(aircraftCodes[i]);
            data.addElement(row);
        }

        Vector<String> columnNames = new Vector<>();
        columnNames.addElement("Flights Awaiting Cleaning");
        JTable table = new JTable(data, columnNames);

        JScrollPane aircraftScroll = new JScrollPane(table);
        frame.add(aircraftScroll, BorderLayout.CENTER);
        frame.setSize(500, 500);
        frame.setVisible(true);
        aircraftScroll.setPreferredSize(new Dimension(350, 150));
    }

    private void addAircraftCodes(int index, AircraftManagementDatabase aircraftManagementDatabase, List<Integer> mrs, String[] aircraftCodes) {
        for (int i = index; i < mrs.size(); i++) {
            aircraftCodes[i] = aircraftManagementDatabase.getFlightCode(mrs.get(i));
        }
    }

    @Override
    public void update(Observable o, Object a) {
        AircraftManagementDatabase aircraftDatabase = null;
        try {
            aircraftDatabase = (AircraftManagementDatabase) a;
        } catch (ClassCastException e) {
            System.out.println(e.getMessage());
        }
        if (aircraftDatabase != null) {
            aircraftManagementDatabase = aircraftDatabase;
        }
    }
}