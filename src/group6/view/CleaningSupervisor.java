package group6.view;

// Generated by Together

import group6.controller.AircraftManagementDatabase;
import group6.model.ManagementRecord;
import group6.util.UISettings;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.Observable;
import java.util.Observer;

/**
 * An interface to SAAMS: Cleaning Supervisor Screen: Inputs events from the
 * Cleaning Supervisor, and displays aircraft information. This class is a
 * controller for the AircraftManagementDatabase: sending it messages to change
 * the aircraft status information. This class also registers as an observer of
 * the AircraftManagementDatabase, and is notified whenever any change occurs in
 * that <<model>> element. See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class CleaningSupervisor extends JFrame implements Observer {
	/**
	 * The Cleaning Supervisor Screen interface has access to the
	 * AircraftManagementDatabase.
	 *
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @label accesses/observes
	 * @directed
	 */
	private AircraftManagementDatabase aircraftManagementDatabase;

	/**
	 * Instance of JTable
	 */
	private JTable table;

	/**
	 * Instance of DefaultTableModel
	 */
	private DefaultTableModel model;

	/**
	 * Constructor of CleaningSupervisor
	 * 
	 * @param aircraftManagementDatabase
	 */
	public CleaningSupervisor(AircraftManagementDatabase aircraftManagementDatabase) {

		this.aircraftManagementDatabase = aircraftManagementDatabase;
		setTitle("Cleaning Supervisor View");
		setLocation(UISettings.CleaningSupervisorPosition);
		setSize(UISettings.VIEW_WIDTH, UISettings.VIEW_HEIGHT);

		Container window = getContentPane();
		window.setLayout(new BoxLayout(window, BoxLayout.PAGE_AXIS));

		JPanel row0 = new JPanel();
		row0.setBorder(new EmptyBorder(0, 0, 10, 0));
		row0.setLayout(new BorderLayout());

		// Make model selecatble but not editable
		model = new DefaultTableModel() {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};

		table = new JTable(model);
		table.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		table.getTableHeader().setReorderingAllowed(false);
		model.addColumn("ID");
		model.addColumn("AIRCRAFT");
		model.addColumn("STATUS");
		table.setModel(model);
		JScrollPane tableScroll = new JScrollPane(table);
		row0.add(tableScroll);

		JPanel row1 = new JPanel();
		row1.setLayout(new GridLayout());

		JButton cleaningDoneBtn = new JButton("Cleaning Completed");
		// java 8 lambda - less code, easier to read
		cleaningDoneBtn.addActionListener(e -> planeCleaned());
		row1.add(cleaningDoneBtn);

		// add frames to window
		window.add(row0);
		window.add(row1);

		// observe the singleton aircraftManDB
		this.aircraftManagementDatabase.addObserver(this);

		setVisible(true);
	}

	/**
	 * Method that represents a plane being cleaned. It will set that status
	 * accordingly
	 */
	private void planeCleaned() {

		if (table.getSelectionModel().isSelectionEmpty() == true) {
			JOptionPane.showMessageDialog(null, "Please select a flight!");
			// prevent execution.
			return;
		}

		int selectedRowIndex = table.getSelectedRow();
		// the the id of the managent record representing the flight
		int mCode = (int) model.getValueAt(selectedRowIndex, 0);
		int status = aircraftManagementDatabase.getStatus(mCode);

		if (status == ManagementRecord.READY_CLEAN_AND_MAINT) {
			// set status to CLEAN_AWAIT_MAINT
			aircraftManagementDatabase.setStatus(mCode, ManagementRecord.CLEAN_AWAIT_MAINT);
		} else if (status == ManagementRecord.OK_AWAIT_CLEAN) {
			// flight has already passed inspection and doesn't need repairs / maintenance
			// time to refuel
			aircraftManagementDatabase.setStatus(mCode, ManagementRecord.READY_REFUEL);
		} else if (status == ManagementRecord.FAULTY_AWAIT_CLEAN) {
			// Plane is in FaultyAwaitingCleaning status
			// It has now been cleaned but needs to be repaired
			aircraftManagementDatabase.setStatus(mCode, ManagementRecord.AWAIT_REPAIR);
		} else {
			if (table.getSelectionModel().isSelectionEmpty() == true) {
				JOptionPane.showMessageDialog(null, "Flight doesn't need cleaning");
			}
		}
	}

	/**
	 * Updates the view
	 */
	@Override
	public void update(Observable o, Object a) {
		// empty the table
		model.setRowCount(0);

		// loop over every management record to update table
		int maxRecords = aircraftManagementDatabase.maxMRs;
		for (int i = 0; i < maxRecords; i++) {

			int flightStatus = aircraftManagementDatabase.getStatus(i);

			if (flightStatus >= ManagementRecord.READY_CLEAN_AND_MAINT
					&& flightStatus <= ManagementRecord.OK_AWAIT_CLEAN) {
				// update table
				String code = aircraftManagementDatabase.getFlightCode(i);
				model.addRow(new Object[] { i, code, flightStatus });
			}
		}
	}
}