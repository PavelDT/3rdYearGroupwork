package group6.view;

import group6.controller.AircraftManagementDatabase;


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

// Generated by Together
/**
 * An interface to SAAMS:
 * Cleaning Supervisor Screen:
 * Inputs events from the Cleaning Supervisor, and displays aircraft information.
 * This class is a controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class CleaningSupervisor extends JFrame implements ActionListener, Observer {
    /**
     * The Cleaning Supervisor Screen interface has access to the AircraftManagementDatabase.
     *
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label accesses/observes
     * @directed
     */
    private AircraftManagementDatabase aircraftManagementDatabase;

    public CleaningSupervisor(AircraftManagementDatabase aircraftManagementDatabase) {
        this.aircraftManagementDatabase = aircraftManagementDatabase;

        setTitle("Cleaning Supervisor");
//        setLocation(UISettings.CleaningSupervisorPosition);
//        setSize(UISettings.VIEW_WIDTH, UISettings.VIEW_HEIGHT);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        Container window = getContentPane();
        window.setLayout(new FlowLayout());
        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        // todo
    }

    @Override
    public void update(Observable observable, Object param) {
        // check instance type
        if (observable instanceof AircraftManagementDatabase) {
            // something changed.
            aircraftManagementDatabase = (AircraftManagementDatabase) param;
        }
    }


}
