package group6.view;

// Generated by Together

import group6.controller.AircraftManagementDatabase;
import group6.model.Itinerary;
import group6.model.ManagementRecord;
import group6.util.UISettings;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.List;

/**
 * An interface to SAAMS: Public Information Screen: Display of useful
 * information about aircraft. This class registers as an observer of the
 * AircraftManagementDatabase, and is notified whenever any change occurs in
 * that <<model>> element. See written documentation.
 *
 * @stereotype boundary/view
 * @url element://model:project::SAAMS/design:view:::id28ykdcko4qme4cko4sx0e
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class PublicInfo extends JFrame implements Observer {
	/**
	 * Each Public Information Screen interface has access to the
	 * AircraftManagementDatabase.
	 *
	 * @supplierCardinality 1
	 * @clientCardinality 0..*
	 * @label accesses/observes
	 * @directed
	 */
	private AircraftManagementDatabase aircraftManagementDatabase;
	// model of the flights list
	private DefaultTableModel departModel;
	private DefaultTableModel arriveModel;

	public static int maxPublicInfoScreens = 2;
	private JTable arrivalTable;
	private JTable departTable;
	private JPanel arrivalPanel;
	private JPanel departurePanel;
	private JScrollPane AscrollPane;
	private JScrollPane DscrollPane;
	private JLabel lblArrivals;
	private JLabel lblDeparts;

	public PublicInfo(AircraftManagementDatabase aircraftManagementDatabase, int screenNumber) {

		this.aircraftManagementDatabase = aircraftManagementDatabase;
		setTitle("Public Info View - Screen " + screenNumber);
		setLocation(UISettings.PublicInfo);
		setSize(UISettings.VIEW_WIDTH, UISettings.VIEW_HEIGHT);

		Container window = getContentPane();
		window.setLayout(new BoxLayout(window, BoxLayout.PAGE_AXIS));

		departurePanel = new JPanel();
		departurePanel.setBorder(new EmptyBorder(0, 0, 10, 0));
		arrivalPanel = new JPanel();
		getContentPane().add(arrivalPanel);
		JPanel spacePanel = new JPanel();
		getContentPane().add(spacePanel);
		// add frames to window
		window.add(departurePanel);
		departurePanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		
		lblDeparts = new JLabel("Departures");
		departurePanel.add(lblDeparts);
		DscrollPane = new JScrollPane();
		departurePanel.add(DscrollPane);
		
		lblArrivals = new JLabel("Arrivals");
		arrivalPanel.add(lblArrivals);

		AscrollPane = new JScrollPane();
		arrivalPanel.add(AscrollPane);

		departModel = new DefaultTableModel() {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};

		arriveModel = new DefaultTableModel() {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};

		departTable = new JTable();
		arrivalTable = new JTable();
		departTable.setModel(departModel);
		arrivalTable.setModel(arriveModel);

		departModel.addColumn("AIRCRAFT");
		departModel.addColumn("TO");
		departModel.addColumn("TIME");

		arriveModel.addColumn("AIRCRAFT");
		arriveModel.addColumn("FROM");
		arriveModel.addColumn("TIME");

		DscrollPane.setViewportView(departTable);
		AscrollPane.setViewportView(arrivalTable);

//		departurePanel.add(departTable);
//		arrivalPanel.add(arrivalTable);

		int[] waitingToLand = this.aircraftManagementDatabase.getWithStatus(ManagementRecord.WANTING_TO_LAND);
		int[] groundClearanceGranted = this.aircraftManagementDatabase
				.getWithStatus(ManagementRecord.GROUND_CLEARANCE_GRANTED);
		int[] landing = this.aircraftManagementDatabase.getWithStatus(ManagementRecord.LANDING);

		List<String> aircraftCodes = new ArrayList<>();
		addAircraftCodes(0, this.aircraftManagementDatabase, waitingToLand, aircraftCodes);
		addAircraftCodes(aircraftCodes.size() - 1, this.aircraftManagementDatabase, groundClearanceGranted,
				aircraftCodes);
		addAircraftCodes(aircraftCodes.size() - 1, this.aircraftManagementDatabase, landing, aircraftCodes);

		Vector<Vector> data = new Vector<>();
		for (int i = 0; i < aircraftCodes.size(); i++) {
			Vector<String> row = new Vector<>();
			row.addElement(aircraftCodes.get(i));
			data.addElement(row);
		}

		// observe the singleton aircraftManDB
		this.aircraftManagementDatabase.addObserver(this);

		setVisible(true);

	}

	private void addAircraftCodes(int index, AircraftManagementDatabase aircraftManagementDatabase, int[] mrs,
			List<String> aircraftCodes) {
		for (int i = index, j = 0; j < mrs.length; i++, j++) {
			aircraftCodes.add(aircraftManagementDatabase.getFlightCode(mrs[j]));
		}
	}

	@Override
	public void update(Observable o, Object a) {

		// empty the tables
		arriveModel.setRowCount(0);
		departModel.setRowCount(0);

		// loop over every management record to update table
		int maxRecords = aircraftManagementDatabase.maxMRs;
		for (int i = 0; i < maxRecords; i++) {
			// int flightStatus = aircraftManagementDatabase.getStatus(i);
			int flightStatus = aircraftManagementDatabase.getStatus(i);
			// Status is displayd if its one of the below 3:
			// WANTING_TO_LAND = 2;
			// GROUND_CLEARANCE_GRANTED = 3;
			// LANDING = 4;
			if (flightStatus == ManagementRecord.WANTING_TO_LAND
					|| flightStatus == ManagementRecord.GROUND_CLEARANCE_GRANTED
					|| flightStatus == ManagementRecord.LANDING) {
				// update table
				String code = aircraftManagementDatabase.getFlightCode(i);
				Itinerary from = aircraftManagementDatabase.getItinerary(i);
				SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss");
				Date date = new Date();

				arriveModel.addRow(new Object[] { code, from.getFrom(), formatter.format(date) });
			}

			if (flightStatus == ManagementRecord.AWAITING_TAKEOFF || flightStatus == ManagementRecord.READY_DEPART
					|| flightStatus == ManagementRecord.DEPARTING_THROUGH_LOCAL_AIRSPACE) {
				// update table
				String code = aircraftManagementDatabase.getFlightCode(i);
				Itinerary to = aircraftManagementDatabase.getItinerary(i);
				SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss");
				Date date = new Date();

				departModel.addRow(new Object[] { code, to.getTo(), formatter.format(date) });
			}
		}
	}
}
