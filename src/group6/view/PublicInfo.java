package group6.view;

// Generated by Together

import group6.controller.AircraftManagementDatabase;
import group6.model.ManagementRecord;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.util.List;

/**
 * An interface to SAAMS:
 * Public Information Screen:
 * Display of useful information about aircraft.
 * This class registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 *
 * @stereotype boundary/view
 * @url element://model:project::SAAMS/design:view:::id28ykdcko4qme4cko4sx0e
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class PublicInfo extends JFrame implements Observer {
    /**
     * Each Public Information Screen interface has access to the AircraftManagementDatabase.
     *
     * @supplierCardinality 1
     * @clientCardinality 0..*
     * @label accesses/observes
     * @directed
     */
    private AircraftManagementDatabase aircraftManagementDatabase;

    public PublicInfo(AircraftManagementDatabase aircraftManagementDatabase) {
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        this.aircraftManagementDatabase = aircraftManagementDatabase;
        setTitle("Public Info View");
        setLocation(150, 150);
        setSize(350, 150);
        Container window = getContentPane();
        window.setLayout(new FlowLayout());

        List<Integer> waitingToLand = this.aircraftManagementDatabase.getWithStatus(ManagementRecord.WANTING_TO_LAND);
        List<Integer>groundClearanceGranted = this.aircraftManagementDatabase.getWithStatus(ManagementRecord.GROUND_CLEARANCE_GRANTED);
        List<Integer> landing = this.aircraftManagementDatabase.getWithStatus(ManagementRecord.LANDING);

        List<String> aircraftCodes = new ArrayList<>();
        addAircraftCodes(0, this.aircraftManagementDatabase, waitingToLand, aircraftCodes);
        addAircraftCodes(aircraftCodes.size() - 1, this.aircraftManagementDatabase, groundClearanceGranted, aircraftCodes);
        addAircraftCodes(aircraftCodes.size() - 1, this.aircraftManagementDatabase, landing, aircraftCodes);

        Vector<Vector> data = new Vector<>();
        for(int i=0; i<aircraftCodes.size(); i++) {
            Vector<String> row  = new Vector<>();
            row.addElement(aircraftCodes.get(i));
            data.addElement(row);
        }

        Vector<String> columnNames = new Vector<>();
        columnNames.addElement("Flight's Landing");

        JTable table = new JTable(data, columnNames);

        JScrollPane aircraftScroll = new JScrollPane(table);
        frame.add(aircraftScroll, BorderLayout.CENTER);
        frame.setSize(500, 500);
        frame.setVisible(true);
        aircraftScroll.setPreferredSize(new Dimension(350, 150));
    }

    private void addAircraftCodes(int index, AircraftManagementDatabase aircraftManagementDatabase, List<Integer> mrs, List<String> aircraftCodes) {
        for (int i = index, j = 0; j < mrs.size(); i++, j++) {
            aircraftCodes.add(aircraftManagementDatabase.getFlightCode(mrs.get(j)));
        }
    }

    @Override
    public void update(Observable o, Object a) {
        AircraftManagementDatabase aircraftDatabase = null;
        try {
            aircraftDatabase = (AircraftManagementDatabase) a;
        } catch (ClassCastException e) {
            System.out.println(e.getMessage());
        }
        if (aircraftDatabase != null) {
            aircraftManagementDatabase = aircraftDatabase;
        }
    }
}