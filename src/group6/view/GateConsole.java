package group6.view;
// Generated by Together

import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import group6.model.PassengerDetails;
import group6.controller.AircraftManagementDatabase;
import group6.controller.GateInfoDatabase;
import group6.util.UISettings;

/**
 * An interface to SAAMS: Gate Control Console: Inputs events from gate staff,
 * and displays aircraft and gate information. This class is a controller for
 * the GateInfoDatabase and the AircraftManagementDatabase: sends messages when
 * aircraft dock, have finished disembarking, and are fully emarked and ready to
 * depart. This class also registers as an observer of the GateInfoDatabase and
 * the AircraftManagementDatabase, and is notified whenever any change occurs in
 * those <<model>> elements. See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 * @url element://model:project::SAAMS/design:node:::id1un8dcko4qme4cko4sw27.node61
 */
public class GateConsole extends JFrame implements Observer, ActionListener {
	/**
	 * The GateConsole interface has access to the GateInfoDatabase.
	 *
	 * @supplierCardinality 1
	 * @clientCardinality 0..*
	 * @label accesses/observes
	 * @directed
	 */
	GateInfoDatabase gateInfoDatabase;

	/**
	 * The GateConsole interface has access to the AircraftManagementDatabase.
	 *
	 * @supplierCardinality 1
	 * @clientCardinality 0..*
	 * @directed
	 * @label accesses/observes
	 */
	private AircraftManagementDatabase aircraftManagementDatabase;

	/**
	 * This gate's gateNumber - for identifying this gate's information in the
	 * GateInfoDatabase.
	 */
	private int gateNumber;

	private int currentRecord = -1;

	private JButton flightDocked;
	private JButton flightUnloaded;
	private JButton addPassenger;
	private JButton flightLoaded;
	private JLabel flightCode;
	private JLabel flightStatus;
	private JLabel flightDestination;
	private JLabel gateStatus;
	private JTextArea gateInformation;

	/**
	 * Class constructor
	 * @param aircraftManagementDatabase
	 * @param gateInfoDatabase
	 * @param gateNumber
	 */
	public GateConsole(AircraftManagementDatabase aircraftManagementDatabase, GateInfoDatabase gateInfoDatabase,
					   int gateNumber) {

		this.aircraftManagementDatabase = aircraftManagementDatabase;

		this.gateInfoDatabase = gateInfoDatabase;

		this.gateNumber = gateNumber;

		setTitle("Gate Console");
		setLocation(UISettings.GateConsolePosition);
		setSize(UISettings.VIEW_WIDTH, UISettings.VIEW_HEIGHT);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		Container window = getContentPane();
		window.setLayout(new FlowLayout());

		flightDocked = new JButton("Plane Docked");
		window.add(flightDocked);
		flightDocked.addActionListener(this);

		flightUnloaded = new JButton("Plane Unloaded");
		window.add(flightUnloaded);
		flightUnloaded.addActionListener(this);

		addPassenger = new JButton("Add Passenger");
		window.add(addPassenger);
		addPassenger.addActionListener(this);

		flightLoaded = new JButton("Plane Loaded");
		window.add(flightLoaded);
		flightLoaded.addActionListener(this);

		gateInformation = new JTextArea();
		gateInformation.setSize(300, 200);
		JScrollPane scroll = new JScrollPane(gateInformation);
		window.add(scroll, null);

		flightCode = new JLabel();
		window.add(flightCode);
		flightStatus = new JLabel();
		window.add(flightStatus);
		flightDestination = new JLabel();
		window.add(flightDestination);
		gateStatus = new JLabel();
		window.add(gateStatus);

		updateGateStatus();
		setVisible(true);
	}

	private void updateGateStatus() {
		gateStatus.setText("Gate Status: " + gateInfoDatabase.getStatus(gateNumber));
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == flightDocked) {
			dockFlight();
		}

		else if (e.getSource() == flightUnloaded) {
			unloadFlight();
		}

		else if (e.getSource() == addPassenger) {
			addPassengerToFlight();
		}

		else if (e.getSource() == flightLoaded) {
			loadFlight();
		}

	}

	private void dockFlight() {
		// UI THIS
		gateInfoDatabase.docked(this.gateNumber);

		gateInformation.append(flightCode + " has now docked at " + gateNumber + "gate \n");
		gateInformation.append("...");
		gateInformation.append(flightCode + " is currently unloading \n");

		updateGateStatus();
		flightCode.setText(aircraftManagementDatabase.getFlightCode(currentRecord));

	}

	private void unloadFlight() {
		// UI THIS
		int[] mCodes = aircraftManagementDatabase.getWithStatus(7);
		int mCode = mCodes[0];
		aircraftManagementDatabase.setStatus(mCode, 8);
	}

	private void addPassengerToFlight() {
		// UI THIS
		PassengerDetails passengerName = new PassengerDetails(JOptionPane.showInputDialog("Passenger Name"));
		int[] mCodes = aircraftManagementDatabase.getWithStatus(14);
		int mCode = mCodes[0];
		aircraftManagementDatabase.addPassenger(mCode, passengerName);

	}

	private void loadFlight() {
		// UI THIS
		aircraftManagementDatabase.getWithStatus(14);
		updateGateStatus();

	}

	public int getRecord() {
		for (int i = 0; i < aircraftManagementDatabase.maxMRs; i++) {
			if (aircraftManagementDatabase.getGateNumber(i) == gateNumber) {
				currentRecord = i;
			}
		}
		return currentRecord;

	}

	//Taken from somewhere else. Will fix and update as im doing UI
	@Override
	public void update(Observable o, Object arg) {
		if (currentRecord != -1) {
			if (gateInfoDatabase.getStatus(gateNumber) != 0) {
				if (gateInfoDatabase.getStatus(gateNumber) == 1) {
					flightDocked.setEnabled(true);
					flightUnloaded.setEnabled(false);
					addPassenger.setEnabled(false);
					flightLoaded.setEnabled(false);
				}
				if (gateInfoDatabase.getStatus(gateNumber) == 2
						&& aircraftManagementDatabase.getStatus(currentRecord) == 7) {
					flightDocked.setEnabled(false);
					flightUnloaded.setEnabled(true);
					addPassenger.setEnabled(false);
					flightLoaded.setEnabled(false);
				}
				if (gateInfoDatabase.getStatus(gateNumber) == 2
						&& aircraftManagementDatabase.getStatus(currentRecord) == 14) {
					flightDocked.setEnabled(false);
					flightUnloaded.setEnabled(false);
					addPassenger.setEnabled(true);
					flightLoaded.setEnabled(true);
				}
			} else {
				flightDocked.setEnabled(false);
				flightUnloaded.setEnabled(false);
				addPassenger.setEnabled(false);
				flightLoaded.setEnabled(false);
			}
		}
	}

}